using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//using System.Windows;
using System.Windows.Forms;

namespace Factory_Inventory.Factory_Classes
{
    public class DbConnect
    {
        //Connect to DB
        //static string myconnstrng = ConfigurationManager.ConnectionStrings["connstrng"].ConnectionString;
        public SqlConnection con;
        public DateTime loginTime;
        private string useractive;

        public DbConnect()
        {
            this.con = new SqlConnection(@"Data Source=DESKTOP-MOUBPNG\MSSQLSERVER2019;Initial Catalog=FactoryInventory;Persist Security Info=True;User ID=sa;Password=Kdvghr2810@;"); // making connection   
        }
        //Utility Functions
        public string[] csvToArray(string str)
        {
            string[] ans = str.Split(',');
            ans = ans.Take(ans.Length - 1).ToArray();
            return ans;
        }

        //Login Logout
        public void recordLogin(string user)
        {
            Debug.Assert(useractive == null);
            this.useractive = user;
            loginTime = DateTime.Now;
        }
        public void recordLogout(string user)
        {
            Debug.Assert(useractive == user);
            DateTime logoutTime = DateTime.Now;
            try
            {
                con.Open();
                TimeSpan value = logoutTime.Subtract(this.loginTime);
                //cmd.Parameters.AddWithValue("@value1", this.loginTime);
                //cmd.Parameters.AddWithValue("@value2", logoutTime);
                SqlDataAdapter adapter = new SqlDataAdapter();
                //string sql = "insert Log (Username, LoginTime, LogoutTime) values ('" + this.useractive + "', convert(datetime, '" + this.loginTime.ToString("dd-MM-yy hh:mm:ss tt") + "', 5), convert(datetime, '" + logoutTime.ToString("dd-MM-yy hh:mm:ss tt") + "', 5))";
                string sql = "insert Log (Username, LoginTime, LogoutTime, TimeDuration) values ('" + this.useractive + "', convert(datetime, '" + this.loginTime.ToString("dd-MM-yy hh:mm:ss tt") + "', 5), convert(datetime, '" + logoutTime.ToString("dd-MM-yy hh:mm:ss tt") + "',5), '" + value.ToString(@"hh\:mm\:ss") + ".0000000')";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                //cmd.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Login record error", "Exception");
            }
            finally
            {
                con.Close();
            }
            this.useractive = null;
        }
        public int checkLogin(string username, string password)
        {
            //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-MOUBPNG\MSSQLSERVER2019;Initial Catalog=FactoryInventory;Integrated Security=True;"); // making connection   

            /* in above line the program is selecting the whole data from table and the matching it with the user name and password provided by user. */
            DataTable dt = new DataTable(); //this is creating a virtual table  
            DataTable dt2 = new DataTable(); //this is creating a virtual table  
            int ans = -1;
            try
            {
                con.Open();
                SqlDataAdapter sda2 = new SqlDataAdapter("SELECT COUNT(*) FROM Users WHERE Username='" + username + "' AND PasswordHash=HASHBYTES('SHA', '" + password + "')", con);
                sda2.Fill(dt2);
                if (dt2.Rows[0][0].ToString() == "1")
                {
                    SqlDataAdapter sda = new SqlDataAdapter("SELECT AccessLevel FROM Users WHERE Username='" + username + "' AND PasswordHash=HASHBYTES('SHA', '" + password + "')", con);
                    sda.Fill(dt);
                    //Console.WriteLine(dt.Rows[0][0].ToString());
                    ans = int.Parse(dt.Rows[0][0].ToString());
                }
                else
                {
                    MessageBox.Show("Invalid username or password");
                    ans = 0;
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not connect to database (checkLogin)", "Exception");
            }

            finally
            {
                con.Close();
            }
            return ans;
        }

        //User
        public int addUser(string username, string password, int acc)
        {
            int ans = -1;
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "INSERT INTO Users (Username, PasswordHash, AccessLevel) VALUES ('" + username + "',HASHBYTES('SHA', '" + password + "'), " + acc + ")";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                ans = 1;
            }
            catch (Exception e)
            {
                ans = 0;
                MessageBox.Show("Could not add user (addUser) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
            return ans;
        }
        public DataTable getUserData()
        {
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT Username, AccessLevel FROM Users", con);
                sda.Fill(dt);
            }
            catch
            {
                MessageBox.Show("Could not connect to database (getUserData)", "Exception");
            }
            finally
            {
                con.Close();

            }
            return dt;
        }
        public void deleteUser(string username)
        {
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "DELETE FROM Users WHERE Username='" + username + "'";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                MessageBox.Show("User deleted", "Success");
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not delete user (deleteUser)", "Exception");
            }

            finally
            {
                con.Close();

            }
        }
        public void updateUser(string username, string password, int access)
        {
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql;
                if (password == "")
                {
                    sql = "UPDATE Users AccessLevel = " + access + "  WHERE Username='" + username + "'";
                    MessageBox.Show("Access Level Updated", "Success");
                }
                else
                {
                    sql = "UPDATE Users SET PasswordHash = HASHBYTES('SHA', '" + password + "') , AccessLevel = " + access + "  WHERE Username='" + username + "'";
                    MessageBox.Show("Password/Access Level Updated", "Success");
                }
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit user (updateUser)", "Exception");
            }

            finally
            {
                con.Close();
            }
        }
        public DataTable getUserLog()
        {
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT * FROM Log", con);
                sda.Fill(dt);
            }
            catch
            {
                MessageBox.Show("Could not connect to database (getUserLog)", "Exception");
            }
            finally
            {
                con.Close();

            }
            return dt;
        }

        //Quality and Carton
        public void addQC(string name, char c)
        {
            if (name == "")
                return;
            string tablename = "";
            if (c == 'q')
                tablename = "Quality";
            else if (c == 'c')
                tablename = "Company_Names";
            else if (c == 'C')
                tablename = "Customers";
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "INSERT INTO " + tablename + " VALUES ('" + name + "') ";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not add " + tablename + " (addQC) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }
        public void deleteQC(string name, char c)
        {
            string tablename = "";
            if (c == 'q')
                tablename = "Quality";
            else if (c == 'c')
                tablename = "Company_Names";
            else if (c == 'C')
                tablename = "Customers";
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "DELETE FROM " + tablename + " WHERE " + tablename + "='" + name + "'";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not delete " + tablename + " (deleteQC) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();

            }
        }
        public void editQC(string newname, string oldname, char c)
        {
            if (newname == "")
                return;
            string tablename = "";
            if (c == 'q')
                tablename = "Quality";
            else if (c == 'c')
                tablename = "Company_Names";
            else if (c == 'C')
                tablename = "Customers";
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "UPDATE " + tablename + " SET " + tablename + "= '" + newname + "'  WHERE " + tablename + " = '" + oldname + "'";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit (editQC) "+ e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }
        public DataTable getQC(char c)
        {
            string tablename = "";
            if (c == 'q')       //Quality
                tablename = "Quality";
            else if (c == 'c')      //Compamy
                tablename = "Company_Names";
            else if (c == 'C')      //Compamy
                tablename = "Customers";
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT * FROM " + tablename + " ", con);
                sda.Fill(dt);
            }
            catch(Exception e)
            {
                MessageBox.Show("Could not connect to database (getQC) " + e.Message, "Exception");
            }
            finally
            {
                con.Close();

            }
            return dt;
        }

        //Carton Voucher
        public bool addCartonVoucher(string inputDate, string billDate, string billNumber, string quality, string quality_arr, string company, string cost, string cartonno, string weights, int number, float netweight)
        {
            List<string> added_carton = new List<string>();
            try
            {
                string[] qualities = this.csvToArray(quality);
                string[] qualities_arr = this.csvToArray(quality_arr);
                string[] carton_no = this.csvToArray(cartonno);
                string[] carton_weights_arr = this.csvToArray(weights);
                string[] buy_cost = this.csvToArray(cost);

                bool flag = false; //to check errors in adding carton;
                int index = 0;
                for (int i = 0; i < number; i++)
                {
                    bool added = this.addCarton(carton_no[i], inputDate, billDate, billNumber, qualities[int.Parse(qualities_arr[i])], company, float.Parse(carton_weights_arr[i]), float.Parse(buy_cost[int.Parse(qualities_arr[i])]), 1);
                    if(added == false)
                    {
                        flag = true; //carton not added successfully
                        index = i;
                        break;
                    }
                    added_carton.Add(carton_no[i]);
                }
                if(flag == true)
                {
                    //Failed to add all cartons
                    //Remove all added cartons
                    for(int i=0; i<added_carton.Count; i++)
                    {
                        removeCarton(added_carton[i]);
                    }
                    MessageBox.Show("Carton Number at Row " + (index + 1).ToString() +" was already added to the Database", "Error");
                    return false;
                }
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "INSERT INTO Carton_Voucher (Date_Of_Input, Date_Of_Billing, Bill_No, Quality, Quality_Arr, Company_Name, Number_of_Cartons, Carton_No_Arr, Carton_Weight_Arr, Net_Weight, Buy_Cost) VALUES ('" + inputDate + "','" + billDate + "', '" + billNumber + "','" + quality + "', '" + quality_arr + "', '" + company + "', " + number + ", '" + cartonno + "', '" + weights + "', " + netweight + " , '" + cost + "')";
                Console.WriteLine(sql);
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                MessageBox.Show("Voucher Added Successfully", "Success");
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not add carton voucher (addCartonVoucher) \n" + e.Message, "Exception");
                for (int i = 0; i < added_carton.Count; i++)
                {
                    removeCarton(added_carton[i]);
                }
                con.Close();
                return false;
            }

            finally
            {
                con.Close();
            }
            return true;

        }
        public DataTable getCartonVoucherHistory()
        {
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT * FROM Carton_Voucher ORDER BY Voucher_ID DESC", con);
                sda.Fill(dt);
            }
            catch
            {
                MessageBox.Show("Could not connect to database (getCartonVoucherHistory)", "Exception");
            }
            finally
            {
                con.Close();

            }
            return dt;
        }
        public void editCartonVoucher(string oldbillno, string inputDate, string billDate, string billNumber, string quality, string quality_arr, string company, string cost, string cartonno, string weights, int number, float netweight, Dictionary<string, bool> carton_editable)
        {
            //Dictionary contains entries for carton_nos with state =2 or state=3;
            try
            {
                SqlDataAdapter adapter = new SqlDataAdapter();
                con.Open();
                //Delete all Previous Cartons
                SqlDataAdapter sda = new SqlDataAdapter("SELECT (Carton_No_Arr) FROM Carton_Voucher WHERE Bill_No='" + oldbillno + "'", con);
                DataTable old = new DataTable();
                sda.Fill(old);
                con.Close();
                string[] old_carton_nos = this.csvToArray(old.Rows[0][0].ToString());
                
                for (int i = 0; i < old_carton_nos.Length; i++)
                {
                    bool value;
                    bool value2 = carton_editable.TryGetValue(old_carton_nos[i], out value);
                    if (value2 == false) //doesnt contain entry, means it is in state 1
                    {
                        Console.WriteLine("Removing Carton: "+ old_carton_nos[i]);
                        this.removeCarton(old_carton_nos[i]);
                    }
                }
                //Add all New Cartons
                string[] qualities = this.csvToArray(quality);
                string[] qualities_arr = this.csvToArray(quality_arr);
                string[] carton_no = this.csvToArray(cartonno);
                string[] carton_weights_arr = this.csvToArray(weights);
                string[] buy_cost = this.csvToArray(cost);

                for (int i = 0; i < carton_no.Length; i++)
                {
                    bool value;
                    bool value2 = carton_editable.TryGetValue(carton_no[i], out value);
                    if (value2==false) this.addCarton(carton_no[i], inputDate, billDate, billNumber, qualities[int.Parse(qualities_arr[i])], company, float.Parse(carton_weights_arr[i]), float.Parse(buy_cost[int.Parse(qualities_arr[i])]), 1);
                }
                con.Open();
                string sql = "UPDATE Carton_Voucher SET Date_Of_Input='" + inputDate + "', Date_Of_Billing='" + billDate + "', Bill_No='" + billNumber + "', Quality='" + quality + "', Quality_Arr='" + quality_arr + "', Company_Name='" + company + "', Number_of_Cartons= " + number + ", Carton_No_Arr='" + cartonno + "', Carton_Weight_Arr='" + weights + "', Net_Weight=" + netweight + ", Buy_Cost='" + cost + "' WHERE Bill_No='" + oldbillno + "'";
                //Console.WriteLine(sql);
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                MessageBox.Show("Voucher Edited Successfully", "Success");
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit carton voucher (editCartonVoucher) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }



        //Carton
        public bool addCarton(string carton_no, string inputDate, string billDate, string billNumber, string quality, string company, float carton_weight, float buy_cost, int state)
        {
            //Returns true if carton added successfully, false if not
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                Console.WriteLine("Carton no:" + carton_no);
                string sql = "INSERT INTO Carton (Carton_No, Carton_State, Date_Of_Input, Date_Of_Billing, Bill_No, Quality, Company_Name, Carton_Weight, Buy_Cost) VALUES ('" + carton_no + "', " + state + " , '" + inputDate + "','" + billDate + "', '" + billNumber + "','" + quality + "', '" + company + "', " + carton_weight + " , " + buy_cost + ")";
                Console.WriteLine(sql);
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not add carton (addCarton) \n" + e.Message, "Exception");
                con.Close();
                return false;
            }

            finally
            {
                con.Close();
            }
            return true;
        }
        public void removeCarton(string no)
        {
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "DELETE FROM Carton WHERE Carton_No='" + no + "'";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not delete Carton_No" + no + " (removeCarton) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }
        //send carton has 3 overloads.
        //1) to enter update just the carton number and state 
        public void sendCarton(string cartonno, int state)
        {
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "UPDATE Carton SET Carton_State=" +state+ " WHERE Carton_No= '" + cartonno+ "'";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit Carton State (sendCarton1)", "Exception");
            }
            finally
            {
                con.Close();
            }
        }
        //2) other one to enter issue date too while adding twist voucher
        public void sendCarton(string cartonno, int state, string date)
        {
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "UPDATE Carton SET Carton_State=" + state + " , Date_Of_Issue='" + date + "' WHERE Carton_No='" + cartonno + "'";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit Carton State (sendCarton) " + e.Message, "Exception");
            }
            finally
            {
                con.Close();
            }
        }
        //3) other one to enter selling date and sell cost too while adding twist voucher
        public void sendCarton(string cartonno, int state, string date, float sell_cost)
        {
            try
            {
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "UPDATE Carton SET Carton_State=" + state + " , Date_Of_Sale='" + date + "', Sell_Cost="+sell_cost+" WHERE Carton_No='" + cartonno + "'";
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit Carton State (sendCarton) " + e.Message, "Exception");
            }
            finally
            {
                con.Close();
            }
        }
        public DataTable getCartonStateQualityCompany(int state, string quality, string company)
        {
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT Carton_No FROM Carton WHERE Carton_State="+state+" AND Quality='"+quality+"' AND Company_Name='" + company + "'", con);
                sda.Fill(dt);
                Console.WriteLine("Got Data");
            }
            catch(Exception e)
            {
                MessageBox.Show("Could not connect to database (getCartonStateQualityCompany) "+e.Message, "Exception");
            }
            finally
            {
                con.Close();
            }
            return dt;
        }
        public DataTable getCartonWeight(string cartonno)
        {
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT Carton_Weight FROM Carton WHERE Carton_No='" + cartonno + "'", con);
                sda.Fill(dt);
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not get weight (getCartonWeight) \n" + e.Message, "Exception");
            }
            finally
            {
                con.Close();
            }
            return dt;
        }
        public int getCartonState(string carton_no)
        {
            int ans = -1;
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT Carton_State FROM Carton WHERE Carton_No='" + carton_no+"'", con);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                if(dt.Rows[0][0]!=null) ans = int.Parse(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not connect to database (getCartonState) " + e.Message, "Exception");
            }
            finally
            {
                con.Close();
            }
            return ans;
        }


        //Twist Voucher
        public void addTwistVoucher(string issueDate, string quality, string company, string cartonno, int number)
        {
            try
            {
                string[] carton_no = this.csvToArray(cartonno);

                for (int i = 0; i < number; i++)
                {
                    this.sendCarton(carton_no[i], 2, issueDate);
                }
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "INSERT INTO Twist_Voucher (Date_Of_Issue, Quality, Company_Name, Carton_No_Arr, Number_of_Cartons) VALUES ('" + issueDate + "','" + quality + "', '" + company + "','" + cartonno + "', " + number + ")";
                Console.WriteLine(sql);
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                MessageBox.Show("Voucher Added Successfully", "Success");
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not add carton voucher (addTwistVoucher) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }
        public DataTable getTwistVoucherHistory()
        {
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT * FROM Twist_Voucher ORDER BY Voucher_ID DESC", con);
                sda.Fill(dt);
            }
            catch(Exception e)
            {
                MessageBox.Show("Could not connect to database (getTwistVoucherHistory) \n" + e.Message, "Exception");
            }
            finally
            {
                con.Close();

            }
            return dt;
        }
        public void editTwistVoucher(int voucherID, string issueDate, string quality, string company, string cartonno, int number)
        {
            try
            {
                SqlDataAdapter adapter = new SqlDataAdapter();
                //Delete all Previous Cartons
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT (Carton_No_Arr) FROM Twist_Voucher WHERE Voucher_ID=" + voucherID + "", con);
                DataTable old = new DataTable();
                sda.Fill(old);
                con.Close();
                string[] old_carton_nos = this.csvToArray(old.Rows[0][0].ToString());
                for (int i = 0; i < old_carton_nos.Length; i++)
                {
                    this.sendCarton(old_carton_nos[i],1);
                }
                //Add all New Cartons
                string[] carton_no = this.csvToArray(cartonno);

                for (int i = 0; i < carton_no.Length; i++)
                {
                    this.sendCarton(carton_no[i], 2);
                }
                con.Open();
                string sql = "UPDATE Twist_Voucher SET Date_Of_Issue='" + issueDate + "', Quality='" + quality + "', Company_Name='" + company + "', Number_of_Cartons= " + number + ", Carton_No_Arr='" + cartonno + "' WHERE Voucher_ID='" + voucherID + "'";
                //Console.WriteLine(sql);
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                MessageBox.Show("Voucher Edited Successfully", "Success");
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit twist voucher (editTwistVoucher) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }


        //Sales voucher
        public void addSalesVoucher(string issueDate, string quality, string company, string cartonno, int number, string customer, float sell_cost)
        {
            try
            {
                string[] carton_no = this.csvToArray(cartonno);

                for (int i = 0; i < number; i++)
                {
                    this.sendCarton(carton_no[i], 3, issueDate, sell_cost);
                }
                con.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string sql = "INSERT INTO Sales_Voucher (Date_Of_Issue, Quality, Company_Name, Customer, Selling_Price, Carton_No_Arr, Number_of_Cartons) VALUES ('" + issueDate + "','" + quality + "', '" + company + "', '" + customer + "', " + sell_cost + " , '" + cartonno + "', " + number + ")";
                Console.WriteLine(sql);
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                MessageBox.Show("Voucher Added Successfully", "Success");
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not add carton voucher (addSalesVoucher) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }
        public DataTable getSalesVoucherHistory()
        {
            DataTable dt = new DataTable(); //this is creating a virtual table  
            try
            {
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT * FROM Sales_Voucher ORDER BY Voucher_ID DESC", con);
                sda.Fill(dt);
            }
            catch(Exception e)
            {
                MessageBox.Show("Could not connect to database (getSalesVoucherHistory) \n" + e.Message, "Exception");
            }
            finally
            {
                con.Close();

            }
            return dt;
        }
        public void editSalesVoucher(int voucherID, string issueDate, string quality, string company, string cartonno, int number, string customer, float sell_cost)
        {
            try
            {
                SqlDataAdapter adapter = new SqlDataAdapter();
                //Delete all Previous Cartons
                con.Open();
                SqlDataAdapter sda = new SqlDataAdapter("SELECT (Carton_No_Arr) FROM Sales_Voucher WHERE Voucher_ID=" + voucherID + "", con);
                DataTable old = new DataTable();
                sda.Fill(old);
                con.Close();
                string[] old_carton_nos = this.csvToArray(old.Rows[0][0].ToString());
                for (int i = 0; i < old_carton_nos.Length; i++)
                {
                    this.sendCarton(old_carton_nos[i], 1);
                }
                //Add all New Cartons
                string[] carton_no = this.csvToArray(cartonno);

                for (int i = 0; i < carton_no.Length; i++)
                {
                    this.sendCarton(carton_no[i], 3);
                }
                con.Open();
                string sql = "UPDATE Sales_Voucher SET Date_Of_Issue='" + issueDate + "', Quality='" + quality + "', Company_Name='" + company + "', Number_of_Cartons= " + number + ", Carton_No_Arr='" + cartonno + "', Customer='"+customer+"', Selling_Price="+sell_cost+" WHERE Voucher_ID='" + voucherID + "'";
                //Console.WriteLine(sql);
                adapter.InsertCommand = new SqlCommand(sql, con);
                adapter.InsertCommand.ExecuteNonQuery();
                MessageBox.Show("Voucher Edited Successfully", "Success");
            }
            catch (Exception e)
            {
                MessageBox.Show("Could not edit sales voucher (editSalesVoucher) \n" + e.Message, "Exception");
            }

            finally
            {
                con.Close();
            }
        }
    }


}
